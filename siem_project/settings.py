"""
Django settings for siem_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os

from pathlib import Path

from celery.schedules import crontab
from django.conf.global_settings import LOGGING
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
dotenv_path = BASE_DIR / '.env'
if dotenv_path.exists():
    load_dotenv(dotenv_path)

# Теперь можно получать переменные
LOGS_API_HOST = os.environ.get('LOGS_API_HOST', 'localhost')
LOGS_API_PORT = os.environ.get('LOGS_API_PORT', '8081')
LOGS_API_SCHEME = os.environ.get('LOGS_API_SCHEME', 'http')
LOGS_API_PATH = os.environ.get('LOGS_API_PATH', '/logs')
LOGS_API_BASE_URL = f"{LOGS_API_SCHEME}://{LOGS_API_HOST}:{LOGS_API_PORT}{LOGS_API_PATH}"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xv+8t#os-4!-3$%7qe0-e*t!!os6*k!#5h)k(%l(5k!@^2wip9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'auth_app',
    'dashboard_app',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'siem_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'siem_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv("TIME_ZONE", "UTC")

# Включаем локализацию
USE_I18N = True
USE_L10N = True

# Доступные языки
LANGUAGES = [
    ('ru', _('Russian')),
    ('en', _('English')),
]

# Путь к каталогам с переводами
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# Время жизни сессии: 600 секунд = 10 минут
SESSION_COOKIE_AGE = 600  # 10 минут
# Обновлять время жизни сессии при каждом запросе
SESSION_SAVE_EVERY_REQUEST = True
# Опционально: удалять куки при закрытии браузера
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# URL перенаправления для неавторизованных пользователей
LOGIN_URL = 'login'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[%(levelname)s] %(name)s: %(message)s"
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "level": "DEBUG",
        },
    },
    "loggers": {
        # ваш модуль
        "dashboard_app.views": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        # при необходимости можно опустить, тогда DEBUG пойдет и от корневого логгера
    },
}

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'

CELERY_BEAT_SCHEDULE = {
    'monitor-every-minute': {
        'task': 'dashboard_app.tasks.monitor_all_services',
        'schedule': 60.0,  # в секундах
    },
    'ping-hosts-every-minute': {
        'task': 'dashboard_app.tasks.ping_all_hosts',
        'schedule': crontab(minute='*/1'),
    },
}

CACHES = {
  'default': {
    'BACKEND': 'django.core.cache.backends.redis.RedisCache',
    'LOCATION': 'redis://127.0.0.1:6379/1',
  }
}

# 1) Основные константы (можно тоже через os.environ)
GRAFANA_SCHEME = os.getenv("GRAFANA_SCHEME", "http")
GRAFANA_HOST   = os.getenv("GRAFANA_HOST", "localhost")
GRAFANA_PORT   = os.getenv("GRAFANA_PORT", "3000")

# 2) Идентификаторы дашборда (UID и slug можно держать в env или фиксом)
GRAFANA_DASHBOARD_UID  = os.getenv("GRAFANA_DASHBOARD_UID", "abcdef123")
GRAFANA_DASHBOARD_SLUG = os.getenv("GRAFANA_DASHBOARD_SLUG", "my-node-exporter-full")
GRAFANA_ORG_ID         = os.getenv("GRAFANA_ORG_ID", "1")

GRAFANA_BASE = (
    f"{GRAFANA_SCHEME}://{GRAFANA_HOST}:{GRAFANA_PORT}"
    f"/d-solo/{GRAFANA_DASHBOARD_UID}/{GRAFANA_DASHBOARD_SLUG}"
    f"?orgId={GRAFANA_ORG_ID}"
)

APP_NAME = "LUMEN SIEM System"
APP_VERSION = "1.0.0"
APP_BUILD_DATE = "2025-05-15"
APP_AUTHORS = [
    {"name": "Степан Затинщиков", "email": "ivan@example.com"},
]
APP_LICENSE = "MIT"
APP_REPO_URL = "https://github.com/stepzat/disser"

