import asyncio
import logging
import requests
from pathlib import Path
from dotenv import dotenv_values
from django.conf import settings

from .models import Service
from .monitor import monitor_services, EnvService

logger = logging.getLogger(__name__)

class ServiceMonitorMiddleware:

    """
    –ö–∞–∂–¥—ã–π –≤—Ö–æ–¥—è—â–∏–π HTTP-–∑–∞–ø—Ä–æ—Å:
     1) –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ Service –∏–∑ –ë–î —Å enable_monitoring=True
     2) –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ .env (–∫–∞–∫ –≤ SystemView)
     3) –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (monitor_services –¥–µ–ª–∞–µ—Ç —ç—Ç–æ)
    """
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        print(">>> ServiceMonitorMiddleware is running for", request.path)
        logger.debug("üõ†Ô∏è  ServiceMonitorMiddleware: incoming %s %s", request.method, request.path)

        # 1) –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π –∏–∑ –ë–î
        db_svcs = Service.objects.all()
        print(f">>> DB services to monitor ({db_svcs.count()}):", [s.name for s in db_svcs])
        try:
            monitor_services(db_svcs)
        except Exception as e:
            print("!!! Error monitoring DB services:", e)
            logger.error("–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DB-—Å–µ—Ä–≤–∏—Å–æ–≤: %s", e)

        # 2) –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ .env
        env_path = Path(settings.BASE_DIR) / '.env'
        env_services = []
        if env_path.exists():
            config = dotenv_values(env_path)
            svc_names = [val for key, val in config.items() if key.startswith('SERVICE_NAME_') and val]
            print(f">>> Found SERVICE_NAME entries ({len(svc_names)}):", svc_names)
            for nm in svc_names:
                address_key = f'{nm}_HOST'
                port_key = f'{nm}_PORT'
                hostname_key = f'{nm}_HOSTNAME'
                protocol_key = f'{nm}_PROTOCOL'
                address = config.get(address_key)
                port = int(config.get(port_key))
                hostname = config.get(hostname_key)
                protocol = config.get(protocol_key, 'TCP').lower()
                svc = EnvService(name=nm, address=address, port=port, protocol=protocol, hostname=hostname)
                env_services.append(svc)
        print(f">>> ENV services to monitor ({len(env_services)}):", [s.name for s in env_services])
        if env_services:
            try:
                monitor_services(env_services)
            except Exception as e:
                print("!!! Error monitoring ENV services:", e)
                logger.error("–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ENV-—Å–µ—Ä–≤–∏—Å–æ–≤: %s", e)

        # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        return self.get_response(request)
