import asyncio
import logging
import requests
from django.conf import settings
from django.core.cache import cache

from dashboard_app.utils import load_props

logger = logging.getLogger(__name__)
MS_BASE = getattr(settings, "NOTIF_SERVICE_URL", "http://localhost:8003/api")


class EnvService:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤, –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ .env:
    —Ö—Ä–∞–Ω–∏—Ç –∞—Ç—Ä–∏–±—É—Ç—ã name, ip, port, protocol, last_is_up –∏ stub-save.
    """
    def __init__(self, name, address, port,hostname, protocol='tcp'):
        self.name         = name
        self.address      = address
        self.port         = port
        self.protocol     = protocol.lower()
        self.hostname     = hostname
        prev_all = cache.get('env_service_statuses', {}) or {}
        self.last_is_up = prev_all.get(self.name, {}).get('is_up')

    def save(self, update_fields=None):
        """
        ¬´–°–æ—Ö—Ä–∞–Ω—è–µ–º¬ª –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ last_is_up –≤ –∫—ç—à
        –ø–æ–¥ –∫–ª—é—á–æ–º env_service_statuses.
        """
        statuses = cache.get('env_service_statuses', {}) or {}
        statuses[self.name] = {
            'is_up': self.last_is_up,
            # —Å—Ç–∞—Ç—É—Å (HTTP code) monitor_services –∫–ª–∞–¥—ë—Ç –≤ svc.status
            'status': getattr(self, 'status', None),
        }
        cache.set('env_service_statuses', statuses, None)


def is_http_up(host, port, timeout=2.0):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTTP-—Å–µ—Ä–≤–∏—Å –ø–æ –∫–æ—Ä–Ω—é (/).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (bool up, str —Å—Ç–∞—Ç—É—Å_–∫–æ–¥_–∏–ª–∏_–æ—à–∏–±–∫–∞).
    """
    url = f'http://{host}:{port}/'
    try:
        resp = requests.get(url, timeout=timeout)
        up = 200 <= resp.status_code < 400
        return up, str(resp.status_code)
    except Exception as e:
        return False, str(e)


async def tcp_up(host, port, timeout=3.0):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TCP-–ø–æ—Ä—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–¥–∞–ª–æ—Å—å.
    """
    try:
        reader, writer = await asyncio.wait_for(
            asyncio.open_connection(host, port),
            timeout=timeout
        )
        writer.close()
        await writer.wait_closed()
        return True
    except Exception as e:
        logger.debug(f"TCP ping {host}:{port} failed: {e}")
        return False


def send_notifications(svc, now_up):
    """
    –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å.
    –ë–µ—Ä—ë—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ /properties/.
    """
    print(f"üîî send_notifications: svc={svc.name} now_up={now_up}")

    # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º (–∏–ª–∏ –∏–∑ –∫—ç—à–∞) props
    try:
        props = load_props()
    except Exception as e:
        print("‚ÄºÔ∏è load_props failed:", e)
        props = {}

    print("   ‚Üí props:", props)

    msg = f"–°–µ—Ä–≤–∏—Å ¬´{svc.name}¬ª —Ç–µ–ø–µ—Ä—å {'UP' if now_up else 'DOWN'}."

    # 2) Email-–∫–∞–Ω–∞–ª
    if props.get("email_enabled") == "true":
        print("   ‚Üí email_enabled == true")
        for to in [e for e in props.get("email_recipients", "").split(",") if e]:
            print(f"     ‚Üí sending EMAIL to {to}")
            payload = {
                "to_email": to,
                "subject":  f"[{svc.name}] —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è",
                "body":     msg,
            }
            resp = requests.post(
                f"{MS_BASE}/notify/email/",
                json=payload,
                timeout=5,
                proxies={'http': None, 'https': None}
            )
            print("     ‚Üê email response:", resp.status_code, resp.text)
    else:
        print("   ‚Üí email_enabled != true")

    # 3) Telegram-–∫–∞–Ω–∞–ª
    print("   ‚Üí telegram_enabled value:", props.get("telegram_enabled"))
    if props.get("telegram_enabled") == "true":
        print("   ‚Üí telegram_enabled == true")
        chat_id = props.get("telegram_chat_id")
        print("   ‚Üí telegram_chat_id is", chat_id)
        if chat_id:
            payload = {"chat_id": chat_id, "message": msg}
            print("     ‚Üí sending TELEGRAM payload:", payload)
            resp = requests.post(
                f"{MS_BASE}/notify/telegram/",
                json=payload,
                timeout=5,
                proxies={'http': None, 'https': None}
            )
            print("     ‚Üê telegram response:", resp.status_code, resp.text)
        else:
            print("   ‚Üí telegram_chat_id is empty, skip Telegram send")
    else:
        print("   ‚Üí telegram_enabled != true, skip Telegram send")



def monitor_services(service_objs):
    """
    –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è Service-–º–æ–¥–µ–ª–∏ –∏ EnvService:
    - service_objs: iterable –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
      .name, .ip (–∏–ª–∏ address), .port, .protocol, .last_is_up –∏ –º–µ—Ç–æ–¥–æ–º .save().
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dict: {'svc': svc, 'is_up': bool, 'status': str}.
    - –ü—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç .last_is_up.
    """
    print(f"üõ†Ô∏è  monitor_services: got {len(service_objs)} services")
    results = []

    for svc in service_objs:
        print(f"üõ†Ô∏è  Checking {svc.name} @ {svc.address}:{svc.port} via {getattr(svc, 'protocol', 'tcp')}")
        logger.debug(svc)
        proto = getattr(svc, 'protocol', 'tcp').lower()
        if proto == 'http':
            up, status = is_http_up(svc.address, svc.port)
            print(f"   üì° HTTP result for {svc.name}: up={up}, status={status}")
        else:
            up = asyncio.run(tcp_up(svc.address, svc.port))
            print(f"   üì° TCP result for {svc.name}: up={up}")
            status = None

        prev = getattr(svc, 'last_is_up', None)
        print(f"   üîÑ previous={prev}, current={up}")
        if prev is not None and prev != up:
            send_notifications(svc, up)

        if prev != up:
            svc.last_is_up = up
            try:
                svc.save(update_fields=['last_is_up'])
            except Exception:
                pass

        results.append({'svc': svc, 'is_up': up, 'status': status})

    return results
